name: Deploy to VPS with GHCR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run build test
        run: npm run build
        
      - name: Check code formatting
        run: npx prettier --check .
        continue-on-error: true

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/torregrossa-portfolio
            
            echo "Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo "Pulling latest Docker image..."
            docker pull ghcr.io/${{ github.repository }}:latest
            
            echo "Stopping old container..."
            docker-compose down || true
            
            echo "Updating docker-compose configuration..."
            sed -i "s|image:.*|image: ghcr.io/${{ github.repository }}:latest|" docker-compose.yml
            
            echo "Starting new container..."
            docker-compose up -d
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Waiting for container to start..."
            sleep 15
            
            echo "Running health check on port 80..."
            if curl -f http://localhost:80; then
              echo "‚úÖ Health check passed!"
              echo "üåê Site accessible at http://${{ secrets.VPS_HOST }}"
            else
              echo "‚ùå Health check failed!"
              echo "üìã Container logs:"
              docker-compose logs
              echo "üìä Container status:"
              docker-compose ps
              exit 1
            fi
            
            echo "üöÄ Deployment completed successfully!"
            echo "üìç Your portfolio is now live at http://${{ secrets.VPS_HOST }}"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Test job: ${{ needs.test.result }}"
          echo "Build job: ${{ needs.build-and-push.result }}"
          echo "Deploy job: ${{ needs.deploy.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Portfolio deployed successfully!"
            echo "üåê Accessible at: http://217.154.120.146"
            echo "üì¶ Docker image: ghcr.io/${{ github.repository }}:latest"
            echo ""
            echo "üîó Next steps:"
            echo "1. Configure DNS: torregrossa.dev ‚Üí 217.154.120.146"
            echo "2. Setup SSL certificate"
            echo "3. Configure domain redirect"
          else
            echo "‚ùå Deployment failed! Check the logs above."
            exit 1
          fi