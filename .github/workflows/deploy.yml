name: Deploy Direct to VPS

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Run build test
        run: npm run build
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          
      - name: Verify build output
        run: |
          echo "🔍 Checking build output..."
          ls -la
          
          if [ ! -d ".next" ]; then
            echo "❌ Build test failed - no '.next' directory found"
            ls -la
            exit 1
          fi
          
          echo "✅ Build test successful - '.next' directory exists"
          echo "📁 Contents of '.next' directory:"
          ls -la .next/ | head -10
          
          # Verifica che ci siano i file essenziali
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "⚠️  Warning: BUILD_ID not found"
          else
            echo "✅ BUILD_ID found: $(cat .next/BUILD_ID)"
          fi
          
          if [ -d ".next/static" ]; then
            echo "✅ Static assets found"
          else
            echo "⚠️  Warning: No static assets found"
          fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code for deployment
        uses: actions/checkout@v4
        with:
          path: 'source'
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "🚀 Starting deployment..."
            
            # Check system resources
            echo "💾 Checking system resources..."
            free -h
            df -h /
            
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "📦 Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              apt-get install -y nodejs
            fi
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "🐳 Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl enable docker
              systemctl start docker
              usermod -aG docker $USER
            fi
            
            # Install certbot if not present
            if ! command -v certbot &> /dev/null; then
              echo "🔒 Installing certbot..."
              apt-get update
              apt-get install -y certbot
            fi
            
            # Clean project directory
            echo "🧹 Cleaning project directory..."
            rm -rf /opt/torregrossa-portfolio
            mkdir -p /opt/torregrossa-portfolio
            
      - name: Copy files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "source/*"
          target: "/opt/torregrossa-portfolio/"
          strip_components: 1
          
      - name: Setup SSL and deploy with Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/torregrossa-portfolio
            
            echo "📁 Checking files..."
            ls -la
            
            if [ ! -f "package.json" ]; then
              echo "❌ package.json not found!"
              echo "Files in directory:"
              find . -type f -name "*.json" -o -name "*.js" -o -name "*.ts" | head -20
              exit 1
            fi
            
            # Setup SSL certificate if not exists
            echo "🔒 Checking SSL certificate..."
            if [ ! -d "/etc/letsencrypt/live/torregrossa.dev" ]; then
              echo "📜 SSL certificate not found, creating new one..."
              
              # Stop any running container temporarily
              docker stop torregrossa-app 2>/dev/null || true
              docker rm torregrossa-app 2>/dev/null || true
              
              # Generate SSL certificate
              certbot certonly --standalone \
                -d torregrossa.dev \
                -d www.torregrossa.dev \
                --email hello@torregrossa.dev \
                --agree-tos \
                --non-interactive \
                --force-renewal || {
                echo "⚠️ SSL certificate generation failed, continuing without SSL..."
                SSL_ENABLED=false
              }
              
              if [ -d "/etc/letsencrypt/live/torregrossa.dev" ]; then
                echo "✅ SSL certificate created successfully!"
                SSL_ENABLED=true
              else
                SSL_ENABLED=false
              fi
            else
              echo "✅ SSL certificate already exists!"
              SSL_ENABLED=true
            fi
            
            echo "🐳 Building Docker image..."
            
            # Clean up old Docker resources first
            echo "🧹 Cleaning old Docker resources..."
            docker stop torregrossa-app 2>/dev/null || true
            docker rm torregrossa-app 2>/dev/null || true
            docker rmi torregrossa-portfolio:latest 2>/dev/null || true
            docker system prune -f --volumes
            
            # Build new image
            echo "🏗️ Building new Docker image..."
            docker build -t torregrossa-portfolio:latest . --no-cache
            
            if [ $? -ne 0 ]; then
              echo "❌ Docker build failed!"
              echo "📋 Docker logs:"
              docker logs $(docker ps -lq) 2>/dev/null || echo "No container logs available"
              echo "💾 System resources after build attempt:"
              free -h
              df -h /
              exit 1
            fi
            
            echo "✅ Docker image built successfully!"
            docker images | grep torregrossa-portfolio
            
            echo "🚀 Starting new container..."
            
            # Run container with or without SSL based on certificate availability
            if [ "$SSL_ENABLED" = "true" ]; then
              echo "🔒 Starting container with SSL support..."
              docker run -d \
                --name torregrossa-app \
                --restart unless-stopped \
                -p 80:80 \
                -p 443:443 \
                -v /etc/letsencrypt/live/torregrossa.dev:/etc/nginx/ssl:ro \
                --memory="512m" \
                --memory-swap="1g" \
                torregrossa-portfolio:latest
            else
              echo "⚠️ Starting container without SSL..."
              docker run -d \
                --name torregrossa-app \
                --restart unless-stopped \
                -p 80:80 \
                --memory="512m" \
                --memory-swap="1g" \
                torregrossa-portfolio:latest
            fi
            
            if [ $? -ne 0 ]; then
              echo "❌ Failed to start container!"
              docker logs torregrossa-app 2>/dev/null || echo "No container logs available"
              exit 1
            fi
            
            echo "⏳ Waiting for container to start..."
            sleep 10
            
            # Container health checks
            echo "📊 Container status after startup:"
            docker ps -a --filter "name=torregrossa-app"
            
            echo "📋 Container logs after startup:"
            docker logs torregrossa-app 2>/dev/null || echo "No logs available"
            
            # Test nginx inside container
            echo "🔍 Testing nginx inside container:"
            docker exec torregrossa-app nginx -t 2>/dev/null && echo "✅ Nginx config OK" || echo "❌ Nginx config error"
            docker exec torregrossa-app ps aux | grep nginx || echo "❌ Nginx not running"
            
            # Check static files
            echo "📁 Checking static files:"
            docker exec torregrossa-app ls -la /usr/share/nginx/html/ | head -5
            docker exec torregrossa-app test -f /usr/share/nginx/html/index.html && echo "✅ index.html exists" || echo "❌ index.html missing"
            
            # Internal connectivity test
            echo "🔍 Testing internal connectivity:"
            docker exec torregrossa-app wget -q --spider http://localhost/ && echo "✅ Internal health check OK" || echo "❌ Internal health check failed"
            
            echo "🔍 Running external health check..."
            
            for i in {1..15}; do
              # Check container status
              if ! docker ps --filter "name=torregrossa-app" --filter "status=running" | grep -q torregrossa-app; then
                echo "❌ Container is not running!"
                docker ps -a --filter "name=torregrossa-app"
                docker logs torregrossa-app 2>/dev/null || echo "No container logs available"
                exit 1
              fi
              
              if curl -f http://localhost:80 >/dev/null 2>&1; then
                echo "✅ Health check passed!"
                echo "🌐 Site accessible at http://${{ secrets.VPS_HOST }}"
                echo "📍 Your portfolio is now live at http://217.154.120.146"
                
                if [ "$SSL_ENABLED" = "true" ]; then
                  echo "🔒 HTTPS enabled: https://torregrossa.dev"
                  echo "🔗 HTTP redirects to HTTPS"
                else
                  echo "🌍 HTTP only: http://torregrossa.dev"
                  echo "🔒 Run manual SSL setup later with: sudo certbot --standalone"
                fi
                
                # Show container status
                echo "📊 Final container status:"
                docker ps --filter "name=torregrossa-app"
                
                # Show resource usage
                echo "💾 Resource usage:"
                docker stats --no-stream torregrossa-app
                
                # Setup auto-renewal cron job if SSL enabled
                if [ "$SSL_ENABLED" = "true" ]; then
                  echo "⏰ Setting up SSL auto-renewal..."
                  (crontab -l 2>/dev/null; echo "0 3 * * * certbot renew --quiet && docker restart torregrossa-app") | crontab -
                  echo "✅ SSL auto-renewal configured"
                fi
                
                # Clean up old images
                echo "🧹 Cleaning up old images..."
                docker image prune -f --filter "dangling=true"
                
                exit 0
              else
                echo "⏳ Attempt $i/15 - waiting for container..."
                echo "📋 Container logs (last 5 lines):"
                docker logs torregrossa-app --tail 5 2>/dev/null || echo "No logs available"
                sleep 5
              fi
            done
            
            echo "❌ Health check failed after 15 attempts!"
            echo "📋 Full container logs:"
            docker logs torregrossa-app 2>/dev/null || echo "No container logs available"
            echo "📊 Container status:"
            docker ps -a --filter "name=torregrossa-app"
            echo "🔍 Docker images:"
            docker images | grep torregrossa || echo "No torregrossa images found"
            echo "💾 System resources:"
            free -h
            df -h /
            echo "🔍 Nginx error logs:"
            docker exec torregrossa-app cat /var/log/nginx/error.log 2>/dev/null || echo "No nginx error logs"
            exit 1

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Test job: ${{ needs.test.result }}"
          echo "Deploy job: ${{ needs.deploy.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Portfolio deployed successfully!"
            echo "🌐 HTTP: http://217.154.120.146"
            echo "🔒 HTTPS: https://torregrossa.dev"
            echo "🌍 Domain: http://torregrossa.dev"
            echo "📦 Docker image: torregrossa-portfolio:latest"
            echo "🐳 Container: torregrossa-app"
            echo "🔧 Memory limit: 512MB (swap: 1GB)"
            echo ""
            echo "🔗 Features enabled:"
            echo "✅ DNS configured: torregrossa.dev → 217.154.120.146"
            echo "🔒 SSL certificate with Let's Encrypt"
            echo "🔄 HTTP to HTTPS redirect"
            echo "⏰ SSL auto-renewal configured"
            echo "📊 Container monitoring enabled"
          else
            echo "❌ Deployment failed! Check the logs above."
            echo "🔍 Common issues to check:"
            echo "- Memory usage during build"
            echo "- Docker build process"
            echo "- SSL certificate generation"
            echo "- Network connectivity"
            echo "- Container health status"
            exit 1
          fi